{"version":3,"sources":["utils/validators.js","components/Common/FormsControls/FormsControls.js","components/Common/FormsControls/FormsControls.module.css","components/Main/Dialogs/Dialogs.module.css","components/Main/Dialogs/People/People.module.css","components/Main/Dialogs/Chat/Chat.module.css","components/Main/Dialogs/People/People.jsx","components/Main/Dialogs/Chat/Chat.jsx","components/Main/Dialogs/Dialogs.jsx","components/Main/Dialogs/DialogsContainer.jsx"],"names":["requiredField","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","className","Class","formControl","inputWrap","Textarea","props","restProps","child","element","Input","createField","placeholder","name","component","validateObj","text","formControlWrap","validate","module","exports","People","path","id","items","to","activeClassName","active","userName","Chat","message","avaWrap","avatar","src","alt","messageText","chatText","ChatMy","my","maxLength50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","sendWrap","Field","newChatText","Dialogs","state","dialogsPage","dialogsElement","dialogs","map","dialog","key","messagesElement","messages","messagesElementMe","messagesMe","React","createRef","dialogsWrap","listWrap","list","chat","values","console","log","newMessageBody","sendTextChat","alert","sendMessage","compose","connect","withAuthRedirect"],"mappings":"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","file":"static/js/5.a6451ab2.chunk.js","sourcesContent":["export const requiredField = (value) => {\r\n    //Check if there is a value in the input field\r\n    if (value)\r\n        return undefined;\r\n\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength)\r\n        return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport Class from './FormsControls.module.css';\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={Class.formControl + \" \" + (hasError ? Class.error : \"\")}>\r\n            <div className={Class.inputWrap}>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    // Метод деструктуризации inpus, meta, ...props\r\n    const {input, meta, child, element, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, element, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, component, validateObj, props = {}, text = \"\") => (\r\n    <div className={Class.formControlWrap}>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validateObj}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n)\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlWrap\":\"FormsControls_formControlWrap__gyDky\",\"inputWrap\":\"FormsControls_inputWrap__go7U1\",\"formControl\":\"FormsControls_formControl__3GIpO\",\"error\":\"FormsControls_error__2z09f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrap\":\"Dialogs_dialogsWrap__2_mfn\",\"listWrap\":\"Dialogs_listWrap__24j0A\",\"list\":\"Dialogs_list__2owHD\",\"chat\":\"Dialogs_chat__2wr4l\",\"sendWrap\":\"Dialogs_sendWrap__3EHBX\",\"message\":\"Dialogs_message__3Vja0\",\"my\":\"Dialogs_my__330MI\",\"avatar\":\"Dialogs_avatar__3BV8p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"People_items__d7RQO\",\"active\":\"People_active__3NVLP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__33Csi\",\"message\":\"Chat_message__1rMIj\",\"avaWrap\":\"Chat_avaWrap__3fuP8\",\"my\":\"Chat_my__29wrr\",\"avatar\":\"Chat_avatar__2AGW9\",\"messageText\":\"Chat_messageText__fEIca\"};","import React from 'react';\r\nimport Class from './People.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst People = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={Class.items}>\r\n            <NavLink to={path} activeClassName={Class.active}>{props.userName}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default People;","import React from 'react';\r\nimport Class from './Chat.module.css';\r\n\r\n\r\nexport const Chat = (props) => {\r\n\r\n    return (\r\n        <div className={Class.message}>\r\n            <div className={Class.avaWrap}>\r\n                <img className={Class.avatar} src={\"./img/posts-user.png\"} alt={\"avatar\"} />\r\n                <span>{props.userName}</span>\r\n            </div>\r\n            <span className={Class.messageText}>{props.chatText}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const ChatMy = (props) => {\r\n    return (\r\n        <div className={`${Class.message} ${Class.my}`}>\r\n            <span className={`${Class.messageText} ${Class.my}`}>{props.chatText}</span>\r\n            <div className={Class.avaWrap}>\r\n                <img className={`${Class.avatar}  ${Class.my}`} src={\"./img/myAvatar.png\"} alt={\"avatar\"} />\r\n                <span>Me</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// export default Chat;\r\n// export default ChatMy;","import React from 'react';\r\nimport Class from './Dialogs.module.css';\r\nimport People from \"./People/People\";\r\nimport {Chat, ChatMy} from \"./Chat/Chat\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElement =\r\n        state.dialogs.map(dialog => <People id={dialog.id} key={dialog.id} userName={dialog.name} />);\r\n    let messagesElement =\r\n        state.messages.map(messages => <Chat id={messages.id} chatText={messages.message} key={messages.id} />);\r\n    let messagesElementMe =\r\n        state.messagesMe.map(messages => <ChatMy chatText={messages.message} key={messages.id}/>);\r\n\r\n//Input Value\r\n    let newMessageElement = React.createRef();\r\n\r\n    let sendMessage = (values) => {\r\n\r\n        if (values) {\r\n            props.sendTextChat(values);\r\n        }\r\n        else {\r\n            alert('enter your text!');\r\n        }\r\n    }\r\n\r\n    /*if (!props.isAuth) {\r\n        return <Redirect to={'/login'} />\r\n    };*/\r\n\r\n    let addNewMessage = (values) => {\r\n        console.log(values.newMessageBody);\r\n\r\n        sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={Class.dialogsWrap}>\r\n            <div className={Class.listWrap}>\r\n                <h1>DIALOGS</h1>\r\n                <div className={Class.list}>\r\n                    {dialogsElement}\r\n                </div>\r\n            </div>\r\n            <div className={Class.chat}>\r\n                {messagesElement}\r\n                {messagesElementMe}\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// We wrap the function with the validator in a variable, pass the length of the string\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={Class.sendWrap}>\r\n            <Field\r\n                component={Textarea}\r\n                name=\"newMessageBody\"\r\n                placeholder={\"your message\"}\r\n                validate={[requiredField, maxLength50]}\r\n                value={props.newChatText}/>\r\n\r\n            <button className=\"button\">Send massage</button>\r\n        </form>\r\n    )\r\n}\r\n// Wrap our component in HOC from reduxForm\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendTextChat} from \"../../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\n/*На вход compose получает значение, которое будет передано в качестве аргумента для первой функции, которая в свою очередь передает результат следующей, в конечном счете compose возвращает единственное значение, результат работы всех функций.*/\r\nexport default compose(\r\n    connect(mapStateToProps, {sendTextChat}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}