{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","pages/Chat/ChatPage.tsx"],"names":["_objectDestructuringEmpty","obj","TypeError","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","messages","messagesDivContainer","useRef","current","addEventListener","event","target","currentTarget","scroll","top","scrollHeight","behavior","style","height","overflow","ref","map","m","index","key","message","Message","display","flexDirection","alignItems","src","photo","userName","AddMessageForm","useState","setMessage","onChange","e","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"oIAAe,SAASA,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gC,8CCajCC,EAAiB,WACtB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAET,OADAN,EAASO,eACF,WACNP,EAASQ,kBAER,IAEI,6BACO,UAAXN,GAAsB,sDACvB,oCACC,kBAAC,EAAD,MACA,kBAAC,EAAD,SAKEO,EAAyB,SAAC,GAAQ,KAEvC,IAAMC,EAAWP,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKK,YAC3DC,EAAuBC,iBAAuB,MAWpD,OATAN,qBAAU,WACkB,IAAD,EAAtBK,IACH,UAAAA,EAAqBE,eAArB,SAA8BC,iBAAiB,mBAAmB,SAACC,GAAW,IAAD,IACrDC,EAAYD,EAA3BE,cACR,QAAC,EAAAD,SAAD,SAA0BE,OAAO,CAAEC,IAAG,UAAGH,SAAH,aAAE,EAA0BI,aAAcC,SAAU,iBAG1F,CAACX,IAGH,yBAAKY,MAAO,CAACC,OAAQ,QAASC,SAAU,QAASC,IAAKd,GACpDD,EAASgB,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAAC,EAAD,CAASC,IAAKD,EAAOE,QAASH,SAMvDI,EAA6C,SAAC,GAAgB,IAAdD,EAAa,EAAbA,QAErD,OAAO,6BACN,yBAAKR,MAAO,CACXU,QAAS,OACTC,cAAe,SACfC,WAAY,eAEZ,kBAAC,IAAD,CAAQC,IAAKL,EAAQM,QACrB,2BAAIN,EAAQO,UACZ,2BAAIP,EAAQA,UAEb,+BAIIQ,EAA+B,SAAC,GAAQ,WAEfC,mBAAS,IAFK,mBAErCT,EAFqC,KAE5BU,EAF4B,KAGtCxC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAAO,6BACN,6BACC,8BAAUuC,SAAU,SAACC,GAAD,OAAOF,EAAWE,EAAEzB,cAAc0B,QAAQA,MAAOb,KAEtE,6BACC,4BAAQc,SAAqB,UAAX1C,EAAoB2C,QAZb,WACrBf,IAEL9B,EAAS8C,YAAYhB,IACrBU,EAAW,OAQV,SALK,SAWOO,UA1FY,WAE1B,OAAO,6BACN,kBAAC,EAAD","file":"static/js/5.285c1255.chunk.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport {Breadcrumb, Layout, Menu, Avatar} from 'antd';\r\nimport {IChatMessage} from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reduser\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n\treturn <div>\r\n\t\t<Chat />\r\n\t</div>;\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(startMessagesListening());\r\n\t\treturn () => {\r\n\t\t\tdispatch(stopMessagesListening());\r\n\t\t}\r\n\t}, []);\r\n\r\n\treturn <div>\r\n\t\t\t{status === 'error' && <div> Error, refresh page!</div>}\r\n\t\t\t<>\r\n\t\t\t\t<Messages />\r\n\t\t\t\t<AddMessageForm />\r\n\t\t\t</>\r\n\t</div>;\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n\r\n\tconst messages = useSelector((state: AppStateType) => state.chat.messages);\r\n\tconst messagesDivContainer = useRef<HTMLDivElement>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (messagesDivContainer) {\r\n\t\t\tmessagesDivContainer.current?.addEventListener('DOMNodeInserted', (event) => {\r\n\t\t\t\tconst { currentTarget: target }  = event;\r\n\t\t\t\t(target  as HTMLElement)?.scroll({ top: (target  as HTMLElement)?.scrollHeight, behavior: 'smooth' });\r\n\t\t\t});\r\n\t\t}\r\n\t}, [messages]);\r\n\r\n\treturn (\r\n\t\t<div style={{height: '400px', overflow: 'auto'}} ref={messagesDivContainer}>\r\n\t\t\t{messages.map((m, index) => <Message key={index} message={m} /> )}\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst Message: React.FC<{message: IChatMessage}> = ({ message}) => {\r\n\r\n\treturn <div>\r\n\t\t<div style={{\r\n\t\t\tdisplay: \"flex\",\r\n\t\t\tflexDirection: \"column\",\r\n\t\t\talignItems: \"flex-start\"\r\n\t\t\t}}>\r\n\t\t\t<Avatar src={message.photo} />\r\n\t\t\t<b>{message.userName}</b>\r\n\t\t\t<b>{message.message}</b>\r\n\t\t</div>\r\n\t\t<hr/>\r\n\t</div>;\r\n}\r\n\r\nconst AddMessageForm: React.FC<{}> = ({}) => {\r\n\r\n\tconst [message, setMessage] = useState('');\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n\tconst sendMessageHandler = () => {\r\n\t\tif (!message) return;\r\n\r\n\t\tdispatch(sendMessage(message));\r\n\t\tsetMessage('');\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<div>\r\n\t\t\t<textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n\t\t</div>\r\n\t\tForm\r\n\t</div>;\r\n}\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}